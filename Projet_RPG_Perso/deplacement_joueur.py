import os
import sys
import les_donnees
import fights
import le_modul_pygame
import afficheur_environnement_de_jeu
import jeu
import pygame
import netoyeur_d_ecran
def verification_deplacement(surface,lab,infos, pos_col, pos_ligne):
    sys.setrecursionlimit(5000)#pour ne pas avoir dans la suite de probl√®me de r√©cursion maximale atteiente
    """
    Indique si le d√©placement du personnage est autoris√© ou pas.
    lab : Labyrinthe
    pos_ligne : position du personnage sur les lignes
    pos_col : position du personnage sur les colonnes
    Valeurs de retour :
    None : d√©placement interdit
    [col, ligne] : d√©placement autoris√© sur la case indiqu√©e
    par la liste
    """
        # Calcul de la taille du labyrinthe
    n_cols = len(lab[0])
    n_lignes = len(lab)
    # Teste si le d√©placement conduit le personnage en dehors de l‚Äôaire
    # de jeu
    if pos_ligne < 0 or pos_col < 0 or pos_ligne > (n_lignes -1) or pos_col > (n_cols -1) :
    #le symbole \ indique que la ligne n‚Äôest pas termin√©e
        return None
    elif lab[pos_ligne][pos_col] == "O" : 
        infos["compteur"]=0
        pygame.mixer.stop()
        le_modul_pygame.joueur_de_sound("sounds/sortie.mp3")
    # On retournera une position hors labyrinthe pour conduire √† la victoire
        return[-1, -1] 
    #on attaque maintenant les objets √† gagner.
    elif lab[pos_ligne][pos_col] == "1":
        le_modul_pygame.affichage_texte(surface,"    Vies Gagn√©es   ",20,500,675,"courier",le_modul_pygame.code_couleur("green"))
        pygame.display.flip()
        le_modul_pygame.joueur_de_sound("sounds/YEAY.mp3")
# teste si le personnage se d√©place sur l'objet "Vie"

        les_donnees.gains( infos , lab[pos_ligne][pos_col] )
# On supprime le tr√©sor d√©couvert chap_chap
        lab[pos_ligne] = lab[pos_ligne][:pos_col] + " " + lab[pos_ligne][pos_col +1:]
        return [pos_col, pos_ligne]


    elif lab[pos_ligne][pos_col] == "2" :
        le_modul_pygame.affichage_texte(surface,"   Armes Charg√©es  ",20,500,675,"courier",le_modul_pygame.code_couleur("green"))
        le_modul_pygame.joueur_de_sound("sounds/armes.mp3")
# teste si le personnage se d√©place sur des ames
# fonction qui calcule le nombre d'armes rapport√© 
        les_donnees.gains( infos , lab[pos_ligne][pos_col] )
# On supprime les armes d√©couvertes chap_chap
        pygame.display.flip()
        lab[pos_ligne] = lab[pos_ligne][:pos_col] + " " + lab[pos_ligne][pos_col +1:]
        return [pos_col, pos_ligne]


    elif lab[pos_ligne][pos_col] == "3" :
        le_modul_pygame.affichage_texte(surface,"Des tr√©sors Gagn√©es",20,500,675,"courier",le_modul_pygame.code_couleur("green"))
        le_modul_pygame.joueur_de_sound("sounds/pieces.mp3")
# teste si le personnage se d√©place sur un tr√©sor
# D√©couverte d‚Äôun tr√©sor
# fonction qui calcule le montant rapport√© par le tr√©sor
        les_donnees.gains( infos , lab[pos_ligne][pos_col] )
# On supprime le tr√©sor d√©couvert chap_chap
        lab[pos_ligne] = lab[pos_ligne][:pos_col] + " " + lab[pos_ligne][pos_col +1:]
        return [pos_col, pos_ligne]

        #Les ennemis sont repr√©sent√©s par ‚úò 
    elif lab[pos_ligne][pos_col] == "‚úò" :
        le_modul_pygame.affichage_texte(surface,"    !! COMBATS !!  ",20,500,675,"courier",le_modul_pygame.code_couleur("red"))
        le_modul_pygame.joueur_de_sound("sounds/Quack.mp3")
    # cCombat √† la rencontre d‚Äôun ennemi
        fights.combat(infos,lab[pos_ligne][pos_col])
# On supprime l'ennemi rencontr√© et on retourne les nouvelles positions de notre joueur
        lab[pos_ligne] = lab[pos_ligne][:pos_col] + " " + lab[pos_ligne][pos_col +1:]
        return [pos_col, pos_ligne]

    elif lab[pos_ligne][pos_col] == "b" :
        le_modul_pygame.affichage_texte(surface,"    !! Le Boss attaque !!  ",20,500,675,"courier",le_modul_pygame.code_couleur("red"))
        le_modul_pygame.joueur_de_sound("sounds/boss.mp3")
    # Combat √† la rencontre du boss
        fights.combat(infos,lab[pos_ligne][pos_col])
# On supprime l'ennemi rencontr√© et on retourne les nouvelles positions de notre joueur
        lab[pos_ligne] = lab[pos_ligne][:pos_col] + " " + lab[pos_ligne][pos_col +1:]
        le_modul_pygame.ralentisseur(0.3)
        return [pos_col, pos_ligne]

    elif lab[pos_ligne][pos_col] != " " and lab[pos_ligne][pos_col] != "z":
        return None
    else :
        return [pos_col, pos_ligne]



def choix_joueur(lab,surface, infos, pos_perso):
    sys.setrecursionlimit(5000)#pour ne pas avoir dans la suite de probl√®me de r√©cursion maximale atteiente
    """
Demande au joueur de saisir son d√©placement
et v√©rifie s‚Äôil est possible.
Si ce n‚Äôest pas le cas affiche un message,
sinon modifie la position du perso
dans la liste pos_perso
lab : Labyrinthe
pos_perso : liste contenant la position du personnage
[colonne, ligne]
Pas de valeur de retour
    """
    dep = None
    if infos["direction"]=="down" or infos["direction"]=="left" or infos["direction"]=="right" or infos["direction"]=="up":
        if infos["direction"]=="up" :
            dep = verification_deplacement(surface,lab, infos,pos_perso[0], pos_perso[1] -1)
        elif infos["direction"]=="down" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0], pos_perso[1] +1)
        elif infos["direction"]=="left" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0] -1, pos_perso[1])
        elif infos["direction"]=="right" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0] +1, pos_perso[1])
        elif infos["direction"]=="escape" :
            os._exit(1)
    else :
        direction = le_modul_pygame.direction()
        if direction =="haut" :
            dep = verification_deplacement(surface,lab, infos,pos_perso[0], pos_perso[1] -1)
        elif direction =="bas" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0], pos_perso[1] +1)
        elif direction =="gauche" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0] -1, pos_perso[1])
        elif direction =="droit" :
            dep = verification_deplacement(surface,lab,infos, pos_perso[0] +1, pos_perso[1])
        elif direction =="arret" :
            os._exit(1)
    # attention il faut importer le module os
    # en d√©but de script il faut √©crire : import os
    infos["direction"]=None
    le_modul_pygame.masque(surface,1300,30,0,670) #Masquons rapidement l'informations envoy√©e apr√®s le d√©placement
    if dep == None :
        le_modul_pygame.affichage_texte(surface,"D√©placement Impossible",20,500,675,"courier",le_modul_pygame.code_couleur("red"))
        le_modul_pygame.joueur_de_sound("sounds/echec.mp3")
        le_modul_pygame.ralentisseur(0.1)
        le_modul_pygame.masque(surface,1300,30,0,670)
    else :
        pos_perso[0] = dep[0] # modification du contenu de la liste
        pos_perso[1] = dep[1] # pos_perso
        if pos_perso == [-1, -1] or  infos["pv"] <= 0 or infos["armes"] <= 0 :
            netoyeur_d_ecran.efface_ecran()#Bah de la console hein üòÑ
            infos["compteur"]=0
            jeu.jeu(lab, infos, surface, pos_perso)
        else :
            le_modul_pygame.masque(surface,30,30,infos["pop"],infos["pap"])
            le_modul_pygame.masque(surface,1300,30,0,0)

            netoyeur_d_ecran.efface_ecran()
            afficheur_environnement_de_jeu.affiche_labyrinthe(lab,surface, pos_perso, infos)

        
        

